<?xml version="1.0" encoding="utf-8"?>

<overlay xmlns="http://hoa-project.net/xyl/xylophone">
<yield id="chapter">

  <p><strong>Business rules</strong> (like “<q>all the customers that have
  reached 100€ in one time receive a voucher of 10% on the next purchase</q>”)
  are most of the time defined <strong>outside</strong> the application. They
  are even often written in a <strong>different language</strong> that the used
  programming language. The <code>Hoa\Ruler</code> library provides an engine
  allowing to simply execute business rules while being
  <strong>efficient</strong> and very <strong>extensible</strong>.</p>

  <h2 id="Table_of_contents">Table of contents</h2>

  <tableofcontents id="main-toc" />

  <h2 id="Introduction" for="main-toc">Introduction</h2>

  <p>The business logic is very different of the Computer logic. “<q>All the
  customers that have reached 100€ in one time receive a voucher of 10% on the
  next purchase</q>”. This rule allows to access to certain parts of the program
  if <strong>valids</strong>. However, it can <strong>change</strong> at any
  moment. Most of time, in a team, it is not the role of the developer to
  implement this rule. It will probably come from a <strong>business rules
  repository</strong>, which have been written by other persons, either
  <strong>manually</strong> or thanks to a <strong>third program</strong>.
  This implies that the language used to express a rule is not the languge used
  to develop the program. An even more obvious example is the use of a rule to
  filter elements: An element is accepted if “<q>its group is <em>customer</em>
  or <em>guest</em> and its number of points is greater than 30</q>”. This rule
  can be written by a user via a command line interface to filter results from a
  database or logs.</p>
  <p>This is important to understand that rules must be written in a
  <strong>dedicated language</strong>. Nevertheless, the way we use rules is
  very <strong>vast</strong> and <strong>unpredictable</strong>. This is why it
  is primordial to have flexible and <strong>extensible</strong> rules in the
  syntax. For instance, it should be allowed to add operators and functions:
  “<q>All the customers from the hotel with a Gold pass will receive a voucher
  of 10%”</q>. The “Gold pass” can be an operator or a function specific to the
  current business.</p>
  <p>The language the <code>Hoa\Ruler</code> library uses to describe rules
  respects these constraints of extensibility. The rules will not be close to
  the human language but they will stay <strong>natural</strong> when reading.
  If we take the example of the “<q>its group is <em>customer</em> or
  <em>guest</em> and its number of points is greater than 30</q>”, it will be
  written: <code><em>group</em> in ["customer", "guest"] and <em>points</em> >
  30</code>. The <code><em>group</em></code> and <code><em>points</em></code>
  elements are variables of the rule. Their values will be defined in a
  context.</p>
  <p>From a more formal point of view, a rule is a predicate, it means that its
  result is always a boolean: <code class="language-php">true</code> or
  <code class="language-php">false</code>. Because these rules are likely to be
  manipulated (modified) and executed, the <code>Hoa\Ruler</code> library
  provides several tools to work efficiently with these constraints, presented
  in the following sections.</p>

  <h2 id="Global_workflow" for="main-toc">Global workflow</h2>

  <p>The global workflow of the <code>Hoa\Ruler</code> library follows
  3 steps:</p>
  <ol>
    <li>Defining a <strong>rule</strong>,</li>
    <li>Defining a <strong>context</strong>,</li>
    <li>Use of an <strong>asserter</strong> for the execution.</li>
  </ol>
  <p>The <strong>rule</strong> is a string matching a specific syntax, which is
  described by the grammar of the language defined by the <code>Hoa\Ruler</code>
  library (detailed hereinafter). This rule contains variables whose values are
  defined by the <strong>context</strong>. The context can contain scalar
  values, arrays or even functions or objects. Finally, the
  <strong>asserter</strong> associates the context to the rule in order to
  execute it and to obtain a result. We remind you about the result which is
  necessarily a boolean. This is therefore a predicate.</p>
  <p>The context is represented by the <code>Hoa\Ruler\Context</code> class. The
  asserter is represented by the <code>Hoa\Ruler\Visitor\Asserter</code> class.
  We can use the <code>Hoa\Ruler\Ruler::assert</code> method to ease its usage.
  Thus:</p>
  <pre><code class="language-php">$ruler = new Hoa\Ruler\Ruler();

// 1. Write a rule.
$rule  = 'group in ["customer", "guest"] and points > 30';

// 2. Create a context.
$context           = new Hoa\Ruler\Context();
$context['group']  = 'customer';
$context['points'] = function ( ) {

    return 42;
};

// 3. Assert!
var_dump(
    $ruler->assert($rule, $context)
);

/**
 * Will output:
 *     bool(true)
 */</code></pre>
  <p>The rule is defined in the <code class="language-php">$rule</code>
  variable. The context, as far as it is concerned, is defined in the
  <code class="language-php">$context</code> variable. It contains 2 variables:
  <code>group</code> and <code>point</code>, respectively with the
  <code class="language-php">'customer'</code> and
  <code class="language-php">42</code> (returned by a function) values. Finally,
  the last step uses the <code>Hoa\Ruler\Ruler::assert</code> method to execute
  the <code class="language-php">$rule</code> rule with the
  <code class="language-php">$context</code> context (this latter is optional).
  The result is <code class="language-php">true</code> because
  <code>group</code> belongs to the list <code>customer</code> or
  <code>guest</code>, and <code>point</code> is greater than 30. Change the
  values in the context or the rule to observe a different result.</p>
  <p>The following sections detail the behavior of each step but the classical
  usage remains as simple as that!</p>

  <h3 id="Grammar" for="main-toc">Grammar (through examples)</h3>

  <p>The grammar of the rules language is described in
  <a href="@central_resource:path=Library/Ruler/Grammar.pp">the
  <code>hoa://Library/Ruler/Grammar.pp</code> file</a>. This grammar is
  expressed with the PP language. To get more information, please see
  <a href="@hack:chapter=Compiler">the <code>Hoa\Compiler</code> library</a>.
  We clarify that the language supports Unicode. We are not going to explain the
  language whilst the grammar provides all the necessary
  <strong>details</strong>. Nevertheless, we are going to give several syntax
  examples.</p>

  <table>
    <caption>Language of <code>Hoa\Ruler</code> through examples.</caption>
    <thead>
      <tr>
        <th>syntax</th>
        <th>semantics</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>'foo'</code>, <code>"foo"</code>, <code>'f\'oo'</code></td>
        <td>strings</td>
      </tr>
      <tr>
        <td><code>true</code>, <code>false</code>, <code>null</code></td>
        <td>pre-defined constants</td>
      </tr>
      <tr>
        <td><code>4.2</code></td>
        <td>a real</td>
      </tr>
      <tr>
        <td><code>42</code></td>
        <td>an integer</td>
      </tr>
      <tr>
        <td><code>['foo', true, 4.2, 42]</code></td>
        <td>an array (heterogeneous)</td>
      </tr>
      <tr>
        <td><code>sum(1, 2, 3)</code></td>
        <td>a call to the <code>sum</code> function with 3 arguments</td>
      </tr>
      <tr>
        <td><code><em>points</em></code></td>
        <td>a variable</td>
      </tr>
      <tr>
        <td><code><em>points</em>['x']</code></td>
        <td>an array access</td>
      </tr>
      <tr>
        <td><code><em>line</em>.pointA</code></td>
        <td>an object access (attribute)</td>
      </tr>
      <tr>
        <td><code><em>line</em>.length()</code></td>
        <td>a call to a method</td>
      </tr>
      <tr>
        <td><code>and</code>, <code>or</code>, <code>xor</code>, <code>not</code></td>
        <td>logical operators</td>
      </tr>
      <tr>
        <td><code>=</code>, <code>!=</code>, <code>></code>, <code>&amp;lt;</code>,
            <code>>=</code>, <code>&amp;lt;=</code></td>
        <td>comparison operators</td>
      </tr>
      <tr>
        <td><code>is</code>, <code>in</code></td>
        <td>membership operators</td>
      </tr>
    </tbody>
  </table>

  <p>Of course, these examples represent atomic parts of the grammar that we can
  combined. Thus:
  <code><em>userA</em>.allows(<em>groups</em>[<em>groupId</em>][<em>userB</em>])</code>
  is valid. Just like <code>f(<em>user</em>, <em>points</em> > 7 and
  <em>points</em> &amp;lt; 42)</code> which is also valid.</p>
  <p>In actual fact, functions, comparison operators and membership operators
  are not defined by the grammar but by the asserter (detailed hereinafter).
  <code>Hoa\Ruler</code> does not make any difference between an operator and a
  function. <strong>Operators are considered as functions</strong>; an operator
  only being a function with an arity of 1 or 2. Thus, we can write <code>2 =
  2</code> or <code>=(2, 2)</code>, this will strictly produce the same result.
  Just like the name of functions that is not defined in the grammar, the name
  of operators is neither defined by the grammar, excepted for the logical
  operators that have a particular processing (because of the operator
  precedence). The immediate result is that we can <strong>create</strong> our
  own operators or functions. We can imagine <code><em>a</em> ∈
  <em>A</em></code>, <code>√(42)</code> or even <code><em>userA</em> allows
  <em>userB</em></code> being valid expressions.</p>

</yield>
</overlay>
